{"version":3,"sources":["../../../src/lib/cli/args.js"],"names":["processArgv","examples","appName","argv","path","basename","split","usage","help","alias","version","npm","name","option","type","coerce","value","TypeError","slice","resolve","describe","defaultConfig","flowCommandPath","choices","reportTypes","join","projectDir","JSON","stringify","globExcludePatterns","options","threshold","outputDir","concurrentFiles","check","_","length","Error","epilogue"],"mappings":"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","file":"args.js","sourcesContent":["// @flow\nimport path from 'path';\nimport yargs from 'yargs';\n\nimport npm from '../../../package';\n\nimport {defaultConfig} from './config';\n\nconst examples = appName => `\nExamples:\n\n  ${appName} -i \"src/**/*.js\"\n  ${appName} -p /path/to/project -i \"src/**/*.js\" -x \"src/test/**/*.js\"\n  ${appName} -t html -p /path/to/project -i \"src/**/*.js\"\n  ${appName} -t html -t json -t text /path/to/project -i \"src/**/*.js\"\n  ${appName} -i \"src/**/*.js\" -c 5\n\nFor more informations:\n\n  https://github.com/rpl/flow-coverage-report\n`;\n\nexport default function processArgv(argv: Array<string>): any {\n  const appName = path.basename(argv[1]).split('.')[0];\n\n  return yargs(argv).usage('Usage: $0 COMMAND PROJECTDIR [...globs]')\n    .help('h')\n    .alias('h', 'help')\n    .version(npm.name + ' ' + npm.version)\n    .alias('v', 'version')\n    // -f flow-command-path\n    .option('flow-command-path', {\n      alias: 'f',\n      type: 'string',\n      coerce: (value: mixed) => {\n        if (value !== 'string') {\n          throw new TypeError('Unexpected non-string value');\n        }\n        return value.slice(0, 2) === './' ? path.resolve(value) : value;\n      },\n      describe: `path to the flow executable (defaults to \"${defaultConfig.flowCommandPath}\")`\n    })\n    .option('flow-command-timeout', {\n      type: 'number',\n      describe: `maximum number of milliseconds to wait for a flow response (defaults to 15 seconds)`\n    })\n    // --type text\n    .option('type', {\n      alias: ['t', 'reportTypes'],\n      choices: ['html', 'json', 'text', 'badge'],\n      describe: `format of the generated reports (defaults to \"${defaultConfig.reportTypes.join(', ')}\")`\n    })\n    // --project-dir \"/project/dir/path\"\n    .option('project-dir', {\n      alias: 'p',\n      type: 'string',\n      describe: `select the project dir path (defaults to \"${defaultConfig.projectDir}\")`\n    })\n    // --include-glob \"src/**/*.js\"\n    .option('include-glob', {\n      alias: ['i', 'globIncludePatterns'],\n      type: 'array',\n      describe: 'include the files selected by the specified glob'\n    })\n    .option('exclude-glob', {\n      alias: ['x', 'globExcludePatterns'],\n      type: 'array',\n      describe: 'exclude the files selected by the specified glob ' +\n        `(defaults to \"${JSON.stringify(defaultConfig.globExcludePatterns)}\")`\n    })\n    .options('threshold', {\n      type: 'number',\n      describe: `the minimum coverage percent requested (defaults to ${defaultConfig.threshold})`\n    })\n    // --output-dir \"/var/public_html/flow-coverage\"\n    .option('output-dir', {\n      alias: 'o',\n      type: 'string',\n      describe: `output html or json files to this folder relative to project-dir (defaults to \"${defaultConfig.outputDir}\")`\n    })\n    // --concurrent-files 5\n    .option('concurrent-files', {\n      alias: 'c',\n      type: 'number',\n      describe: `the maximum number of files concurrently submitted to flow (defaults to ${defaultConfig.concurrentFiles})`\n    })\n    // --strict-coverage\n    .option('strict-coverage', {\n      type: 'boolean',\n      describe: 'non annotated and flow weak files are considered as completely uncovered. ' +\n        'Default behavior is for flow to best-guess coverage on all the files included in the report.'\n    })\n    .option('exclude-non-flow', {\n      type: 'boolean',\n      describe: 'Excludes flies without flow annotation from the report'\n    })\n    // --no-config\n    .option('no-config', {\n      type: 'boolean',\n      describe: 'do not load any config file from the project dir'\n    })\n    .option('config', {\n      type: 'string',\n      describe: 'file path of the config file to load'\n    })\n    .check(argv => {\n      if (argv._.length > 2) {\n        throw new Error('ERROR: The include glob needs to be quoted.');\n      }\n\n      return true;\n    })\n    .epilogue(examples(appName))\n    .argv;\n}\n"]}
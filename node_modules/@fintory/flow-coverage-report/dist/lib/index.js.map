{"version":3,"sources":["../../src/lib/index.js"],"names":["DEFAULT_FLOW_TIMEOUT","opts","projectDir","tmpDirPath","process","env","VERBOSE","console","log","flowCommandPath","flowCommandTimeout","outputDir","path","isAbsolute","resolve","join","globIncludePatterns","globExcludePatterns","Array","isArray","Promise","reject","TypeError","length","threshold","concurrentFiles","strictCoverage","excludeNonFlow","coverageData","reportResults","reportTypes","indexOf","push","reportJSON","generate","reportText","reportBadge","reportHTML","then","all","generateFlowCoverageReport"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport path from 'path';\n\nimport {collectFlowCoverage} from './flow';\nimport {withTmpDir} from './promisified';\nimport reportHTML from './report-html';\nimport reportBadge from './report-badge';\nimport reportJSON from './report-json';\nimport reportText from './report-text';\n\nimport type {FlowCoverageSummaryData} from './flow'; // eslint-disable-line no-duplicate-imports\n\nexport type FlowCoverageReportType = 'json' | 'text' | 'badge' |'html';\n\nexport type FlowCoverageReportOptions = {\n  projectDir: string,\n  flowCommandPath: string,\n  flowCommandTimeout: number,\n  globIncludePatterns: Array<string>,\n  globExcludePatterns: Array<string>,\n  outputDir: string,\n  reportTypes?: Array<FlowCoverageReportType>,\n  htmlTemplateOptions?: Object,\n  threshold: number,\n  strictCoverage: boolean,\n  excludeNonFlow: boolean,\n  concurrentFiles?: number,\n  log?: Function\n};\n\n// Default timeout for flow coverage commands.\nexport const DEFAULT_FLOW_TIMEOUT = 15 * 1000;\n\n// User Scenarios\n// 1. generate text report from a project dir\n// 2. generate text report from a project dir and save json to file\n// 3. generate text report from a project dir and html report\n// 4. generate text/html report from a saved json file\n// 5. set a custom threshold\n// 6. set a custom output dir\n// 7. usa a saved json file to compute coverage trend (and fail on negative trends)\n\nexport default async function generateFlowCoverageReport(opts: FlowCoverageReportOptions) {\n  // Apply defaults to options.\n  const projectDir = opts.projectDir;\n\n  let tmpDirPath: ?string;\n\n  if (process.env.VERBOSE && process.env.VERBOSE === 'DUMP_JSON') {\n    tmpDirPath = await withTmpDir('flow-coverage-report');\n    console.log(`Verbose DUMP_JSON mode enabled (${tmpDirPath})`);\n  }\n\n  opts.flowCommandPath = opts.flowCommandPath || 'flow';\n  opts.flowCommandTimeout = opts.flowCommandTimeout || DEFAULT_FLOW_TIMEOUT; // Defaults to 15s\n  opts.outputDir = opts.outputDir || './flow-coverage';\n  opts.outputDir = path.isAbsolute(opts.outputDir) ?\n    opts.outputDir : path.resolve(path.join(projectDir, opts.outputDir));\n  opts.globIncludePatterns = opts.globIncludePatterns || [];\n  opts.globExcludePatterns = opts.globExcludePatterns || [];\n\n  if (!Array.isArray(opts.globExcludePatterns)) {\n    opts.globExcludePatterns = [opts.globExcludePatterns];\n  }\n\n  // Apply validation checks.\n  if (!projectDir) {\n    return Promise.reject(new TypeError('projectDir option is mandatory'));\n  }\n\n  if (opts.globIncludePatterns.length === 0) {\n    return Promise.reject(new TypeError('empty globIncludePatterns option'));\n  }\n\n  if (!opts.threshold) {\n    return Promise.reject(new TypeError('threshold option is mandatory'));\n  }\n\n  const coverageData: FlowCoverageSummaryData = await collectFlowCoverage(\n    opts.flowCommandPath, opts.flowCommandTimeout,\n    opts.projectDir, opts.globIncludePatterns, opts.globExcludePatterns,\n    opts.threshold, opts.concurrentFiles || 1,\n    tmpDirPath,\n    opts.strictCoverage,\n    opts.excludeNonFlow\n  );\n\n  const reportResults = [];\n  const reportTypes = opts.reportTypes || ['text'];\n\n  if (reportTypes.indexOf('json') >= 0) {\n    reportResults.push(reportJSON.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf('text') >= 0) {\n    reportResults.push(reportText.generate(coverageData, opts));\n  }\n\n  // Run the badge reporter implicitly if the html report has been included.\n  if (reportTypes.indexOf('badge') >= 0 || reportTypes.indexOf('html') >= 0) {\n    reportResults.push(reportBadge.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf('html') >= 0) {\n    reportResults.push(reportHTML.generate(coverageData, opts).then(() => {\n      console.log(`View generated HTML Report at file://${opts.outputDir}/index.html`);\n    }));\n  }\n\n  return Promise.all(reportResults).then(() => {\n    return [coverageData, opts];\n  });\n}\n"]}